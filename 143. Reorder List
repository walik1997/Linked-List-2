# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reorderList(self, head: Optional[ListNode]) -> None:
        if head ==None or head.next==None:
            return
        slow=head
        fast=head
        while( fast !=None and fast.next!=None ):
            slow=slow.next
            fast=fast.next.next        
        fast=self.reverse(slow.next)
        slow.next=None
        slow=head
        while fast!=None:
            temp=slow.next
            slow.next=fast
            fast=fast.next
            slow.next.next=temp
            slow=slow.next.next
    def reverse(self,node):
        temp=None
        prev=None
        curr=node
        while (curr!=None):
            temp=curr.next
            curr.next=prev
            prev=curr
            curr=temp
        return prev