# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:
        def get_length(head: ListNode) -> int:
                length = 0
                current = head
                while current:
                    length += 1
                    current = current.next
                return length
        lenA=get_length(headA)
        lenB=get_length(headB)

        p2=headB
        p1=headA        
        if lenA>lenB:
            for i in range(lenA-lenB):
                p1=p1.next
                
        if lenA<lenB:
            for i in range(lenB-lenA):
                p2=p2.next
        print(p1.val,"/n" ,p2.val)
        while (p1 != p2):
            p1=p1.next
            p2=p2.next
        return p1